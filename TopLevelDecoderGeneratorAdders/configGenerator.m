function configGenerator(param)

% Generate config file

% Open config file for writing
fid = fopen('../TopLevelDecoderAdders/config.vhdl', 'wt');

fprintf(fid,'library ieee;\n');
fprintf(fid,'use ieee.std_logic_1164.all;\n');
fprintf(fid,'use ieee.numeric_std.all;\n');
fprintf(fid,'use ieee.math_real.all;\n');
fprintf(fid,'library work;\n\n');
fprintf(fid,'package config is\n\n');

%% Variable nodes

fprintf(fid,['-- Number of variable nodes\n' ...
    'constant N : integer := %d;\n\n' ...
    '-- Number of check nodes\n' ...
    'constant M : integer := %d;\n\n'], param.N, param.M);

fprintf(fid,'-- LLR bit-widths\n');
fprintf(fid,'constant QLLR : integer := %d;\n', param.QLLR);
fprintf(fid,'constant QCh : integer := %d;\n\n', param.QCh);

fprintf(fid,'------ Variable Nodes -----\n');
fprintf(fid,'-- Variable node degree\n');
fprintf(fid,'constant VNodeDegree : integer := %d;\n\n', param.VNodeDegree);

fprintf(fid,'-- Channel LLR type\n');
fprintf(fid,'subtype ChLLRType is signed (QLLR-1 downto 0);\n');
fprintf(fid,'type ChLLRTypeStage is array(0 to N-1) of ChLLRType;\n\n');

fprintf(fid,'-- Internal LLR type\n');
fprintf(fid,'subtype IntLLRSubType is signed (QLLR-1 downto 0);\n');
fprintf(fid,'type IntLLRTypeV is array (0 to VNodeDegree-1) of IntLLRSubType;\n\n');

fprintf(fid,'-- Adder tree depth\n');
fprintf(fid,'constant VNodetreeDepth : integer := integer(ceil(log2(real(VNodeDegree+1)))) + 1;\n');
fprintf(fid,'constant VNodetreeNodes : integer := 2**VNodetreeDepth-1;\n');
fprintf(fid,'constant VNodenoLeaves : integer := 2**(VNodetreeDepth-1);\n\n'); 

fprintf(fid,'constant QLLRInternal : integer := QLLR+VNodetreeDepth-1;\n');
fprintf(fid,'subtype LLRInternalType is signed (QLLRInternal-1 downto 0);\n\n');

fprintf(fid,'-- Vector holding tree structure;\n');
fprintf(fid,'type ExtendedInputType is array (0 to VNodenoLeaves-1) of LLRInternalType;\n');
fprintf(fid,'type VNodeTreeLevelType is array (0 to VNodenoLeaves-1) of LLRInternalType;\n');
fprintf(fid,'type VNodeTreeType is array (0 to VNodetreeDepth-1) of VNodeTreeLevelType;\n\n');

%% Check nodes

fprintf(fid,['------ Check Nodes ------ \n' ...
    '-- Check node degree\n' ...
    'constant CNodeDegree : integer := %d;\n' ...
    'constant CNodeDegreeLog : integer := integer(log2(real(CNodeDegree)));\n\n'], param.CNodeDegree);

fprintf(fid,['-- Comparator tree depth\n' ...
    'constant treeDepth : integer := integer(ceil(log2(real(CNodeDegree/2)))) + 1;\n' ...
    'constant noLeaves : integer := 2**treeDepth;\n']);

fprintf(fid, ['-- Internal LLR\n' ...
    'type IntLLRTypeC is array (0 to CNodeDegree-1) of IntLLRSubType;\n\n' ...
    '-- Absolute values of internal LLRs\n' ...
    'subtype IntAbsLLRSubType is std_logic_vector(QLLR-2 downto 0);\n' ...
    'type IntAbsLLRTypeC is array (0 to CNodeDegree-1) of IntAbsLLRSubType;\n\n' ...
    '-- Minimum output type\n' ...
    'type MinType is array (0 to 1) of std_logic_vector(QLLR-2 downto 0);\n\n' ...
    '-- Sorter tree types\n' ...
    'type TreeLevelType is array (0 to noLeaves-1) of IntAbsLLRSubType;\n' ...
    'type TreeType is array (0 to treeDepth-1) of TreeLevelType;\n\n']);

%% Pipeline stages

fprintf(fid,['------ Check node stage ------\n' ...
    '-- Check node stage input signal\n' ...
    'type IntLLRTypeCNStage is array(0 to M-1) of IntLLRTypeC;\n\n']);

fprintf(fid,['------ Variable node stage ------\n' ...
    '-- Variable node stage input signal\n' ...
    'type IntLLRTypeVNStage is array(0 to N-1) of IntLLRTypeV;\n\n']);

fprintf(fid,'function to_std_logic(i : in integer range 0 to 1) return std_logic;\n\n');

fprintf(fid,['end config;\n\n' ...
    'package body config is\n\n' ...
    '  function to_std_logic(i : in integer range 0 to 1) return std_logic is\n' ... 
    '  begin\n' ...
    '  if i = 0 then\n' ...
    '      return ''0'';\n' ...
    '  end if;\n' ...
    '  return ''1'';\n' ...
    '  end function;\n\n' ...
    'end config;']);

% Close config file
fclose(fid);